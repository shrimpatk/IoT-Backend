// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String             @id @default(uuid())
  username      String             @unique
  email         String             @unique
  displayName   String?
  h_password    String
  settings      UserSetting?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  deletedAt     DateTime?
  ownedLists    ShoppingList[]     @relation("OwnedLists")
  addedItems    ShoppingListItem[]
  roles         UserRole[]
  refreshTokens RefreshToken[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

model UserSetting {
  id                   String   @id @default(uuid())
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id])
  receiveNotifications Boolean  @default(false)
  receiveEmails        Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Role {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  users       UserRole[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  roleId    String
  user      User     @relation(fields: [userId], references: [id])
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, roleId])
}

model GroceryItem {
  id         String             @id @default(uuid())
  name       String
  category   String
  defaultUrl String?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  listItems  ShoppingListItem[]
}

model ShoppingList {
  id        String             @id @default(uuid())
  name      String
  ownerId   String
  owner     User               @relation("OwnedLists", fields: [ownerId], references: [id])
  status    String             @default("active")
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  items     ShoppingListItem[]
}

model ShoppingListItem {
  id             String       @id @default(uuid())
  shoppingListId String
  shoppingList   ShoppingList @relation(fields: [shoppingListId], references: [id])
  groceryItemId  String?
  GroceryItem    GroceryItem? @relation(fields: [groceryItemId], references: [id])
  quantity       Int          @default(1)
  bought         Boolean      @default(false)
  notes          String?
  customUrl      String?
  addedById      String
  addedBy        User         @relation(fields: [addedById], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([shoppingListId, groceryItemId, addedById])
}

model GlobalSetting {
  key   String @id
  value Int
}
