# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Air {
  timestamp: Float!
  unit: String!
  value: Float!
}

type AirQuality {
  air: Air!
  co: Co!
}

type Co {
  timestamp: Float!
  unit: String!
  value: Float!
}

input CreateUserInput {
  displayName: String
  email: String!
  password: String!
  username: String!
}

input CreateUserSettingInput {
  receiveEmails: Boolean = false
  receiveNotifications: Boolean = false
  userId: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Device {
  device_id: String!
  last_seen: String!
  room: String!
  sensors: Sensors!
  status: Status!
}

type Environmental {
  humidity: Humidity!
  temperature: Temperature!
}

type Humidity {
  timestamp: Float!
  unit: String!
  value: Float!
}

input LoginInput {
  password: String!
  username: String!
}

type LoginResponse {
  access_token: String!
  user: User!
}

type Mutation {
  createUser(createUserdata: CreateUserInput!): User!
  createUserSettings(createUserSettingsData: CreateUserSettingInput!): UserSetting!
  login(loginInput: LoginInput!): LoginResponse!
  logout: Boolean!
  refreshAccessToken: RefreshTokenResponse!
  updateThrottleTime(time: Int!): Int!
}

type Query {
  getThrottleTime: Int!
  getUserById(id: String!): User
  me: User!
  sensorUpdate: SensorData
}

type RefreshTokenResponse {
  access_token: String!
  refresh_token: String!
}

type Role {
  created_at: DateTime!
  description: String
  id: ID!
  name: String!
  updated_at: DateTime!
  users: [UserRole!]!
}

type SensorData {
  devices: [Device!]!
  timestamp: Float!
}

type Sensors {
  air_quality: AirQuality!
  environmental: Environmental!
}

type Status {
  online: String!
  rssi: Float!
  timestamp: String!
  uptime: Float!
}

type Subscription {
  sensorsRead: SensorData!
}

type Temperature {
  timestamp: Float!
  unit: String!
  value: Float!
}

type User {
  createdAt: DateTime!
  delatedAt: DateTime
  displayName: String
  email: String!
  id: ID!
  roles: [Role!]
  settings: UserSetting
  updatedAt: DateTime!
  username: String!
}

type UserRole {
  created_at: DateTime!
  id: ID!
  role: Role!
  roleId: String!
  updated_at: DateTime!
  user: User!
  userId: String!
}

type UserSetting {
  createdAt: DateTime!
  id: ID!
  receiveEmails: Boolean!
  receiveNotifications: Boolean!
  updatedAt: DateTime!
  user: User!
  userId: String!
}